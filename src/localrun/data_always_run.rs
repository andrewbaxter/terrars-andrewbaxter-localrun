use serde::Serialize;
use std::cell::RefCell;
use std::rc::Rc;
use terrars::*;
use super::provider::ProviderLocalrun;

#[derive(Serialize)]
struct DataAlwaysRunData {
    #[serde(skip_serializing_if = "Vec::is_empty")]
    depends_on: Vec<String>,
    #[serde(skip_serializing_if = "SerdeSkipDefault::is_default")]
    provider: Option<String>,
    #[serde(skip_serializing_if = "Option::is_none")]
    for_each: Option<String>,
    command: ListField<PrimField<String>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    environment: Option<RecField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    outputs: Option<ListField<PrimField<String>>>,
    #[serde(skip_serializing_if = "Option::is_none")]
    working_dir: Option<PrimField<String>>,
}

struct DataAlwaysRun_ {
    shared: StackShared,
    tf_id: String,
    data: RefCell<DataAlwaysRunData>,
}

#[derive(Clone)]
pub struct DataAlwaysRun(Rc<DataAlwaysRun_>);

impl DataAlwaysRun {
    fn shared(&self) -> &StackShared {
        &self.0.shared
    }

    pub fn depends_on(self, dep: &impl Referable) -> Self {
        self.0.data.borrow_mut().depends_on.push(dep.extract_ref());
        self
    }

    pub fn set_provider(&self, provider: &ProviderLocalrun) -> &Self {
        self.0.data.borrow_mut().provider = Some(provider.provider_ref());
        self
    }

    #[doc= "Set the field `environment`.\nEnvironment variables; inherits terraform's environment"]
    pub fn set_environment(self, v: impl Into<RecField<PrimField<String>>>) -> Self {
        self.0.data.borrow_mut().environment = Some(v.into());
        self
    }

    #[doc= "Set the field `outputs`.\nPaths to files generated by the command, relative to working directory; the hashes of these are placed in `output_hashes` after execution"]
    pub fn set_outputs(self, v: impl Into<ListField<PrimField<String>>>) -> Self {
        self.0.data.borrow_mut().outputs = Some(v.into());
        self
    }

    #[doc= "Set the field `working_dir`.\nWorking directory in which to run command; defaults to current directory"]
    pub fn set_working_dir(self, v: impl Into<PrimField<String>>) -> Self {
        self.0.data.borrow_mut().working_dir = Some(v.into());
        self
    }

    #[doc= "Get a reference to the value of field `command` after provisioning.\nCommand to run; first element is executable, remaining elements are arguments"]
    pub fn command(&self) -> ListRef<PrimExpr<String>> {
        ListRef::new(self.shared().clone(), format!("{}.command", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `environment` after provisioning.\nEnvironment variables; inherits terraform's environment"]
    pub fn environment(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.environment", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `output_hashes` after provisioning.\nThe hashes of the output files, updated after execution"]
    pub fn output_hashes(&self) -> ListRef<PrimExpr<String>> {
        ListRef::new(self.shared().clone(), format!("{}.output_hashes", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `outputs` after provisioning.\nPaths to files generated by the command, relative to working directory; the hashes of these are placed in `output_hashes` after execution"]
    pub fn outputs(&self) -> ListRef<PrimExpr<String>> {
        ListRef::new(self.shared().clone(), format!("{}.outputs", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `working_dir` after provisioning.\nWorking directory in which to run command; defaults to current directory"]
    pub fn working_dir(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.working_dir", self.extract_ref()))
    }
}

impl Referable for DataAlwaysRun {
    fn extract_ref(&self) -> String {
        format!("data.{}.{}", self.0.extract_datasource_type(), self.0.extract_tf_id())
    }
}

impl Datasource for DataAlwaysRun { }

impl ToListMappable for DataAlwaysRun {
    type O = ListRef<DataAlwaysRunRef>;

    fn do_map(self, base: String) -> Self::O {
        self.0.data.borrow_mut().for_each = Some(format!("${{{}}}", base));
        ListRef::new(self.0.shared.clone(), self.extract_ref())
    }
}

impl Datasource_ for DataAlwaysRun_ {
    fn extract_datasource_type(&self) -> String {
        "localrun_always_run".into()
    }

    fn extract_tf_id(&self) -> String {
        self.tf_id.clone()
    }

    fn extract_value(&self) -> serde_json::Value {
        serde_json::to_value(&self.data).unwrap()
    }
}

pub struct BuildDataAlwaysRun {
    pub tf_id: String,
    #[doc= "Command to run; first element is executable, remaining elements are arguments"]
    pub command: ListField<PrimField<String>>,
}

impl BuildDataAlwaysRun {
    pub fn build(self, stack: &mut Stack) -> DataAlwaysRun {
        let out = DataAlwaysRun(Rc::new(DataAlwaysRun_ {
            shared: stack.shared.clone(),
            tf_id: self.tf_id,
            data: RefCell::new(DataAlwaysRunData {
                depends_on: core::default::Default::default(),
                provider: None,
                for_each: None,
                command: self.command,
                environment: core::default::Default::default(),
                outputs: core::default::Default::default(),
                working_dir: core::default::Default::default(),
            }),
        }));
        stack.add_datasource(out.0.clone());
        out
    }
}

pub struct DataAlwaysRunRef {
    shared: StackShared,
    base: String,
}

impl Ref for DataAlwaysRunRef {
    fn new(shared: StackShared, base: String) -> Self {
        Self {
            shared: shared,
            base: base,
        }
    }
}

impl DataAlwaysRunRef {
    fn shared(&self) -> &StackShared {
        &self.shared
    }

    fn extract_ref(&self) -> String {
        self.base.clone()
    }

    #[doc= "Get a reference to the value of field `command` after provisioning.\nCommand to run; first element is executable, remaining elements are arguments"]
    pub fn command(&self) -> ListRef<PrimExpr<String>> {
        ListRef::new(self.shared().clone(), format!("{}.command", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `environment` after provisioning.\nEnvironment variables; inherits terraform's environment"]
    pub fn environment(&self) -> RecRef<PrimExpr<String>> {
        RecRef::new(self.shared().clone(), format!("{}.environment", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `output_hashes` after provisioning.\nThe hashes of the output files, updated after execution"]
    pub fn output_hashes(&self) -> ListRef<PrimExpr<String>> {
        ListRef::new(self.shared().clone(), format!("{}.output_hashes", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `outputs` after provisioning.\nPaths to files generated by the command, relative to working directory; the hashes of these are placed in `output_hashes` after execution"]
    pub fn outputs(&self) -> ListRef<PrimExpr<String>> {
        ListRef::new(self.shared().clone(), format!("{}.outputs", self.extract_ref()))
    }

    #[doc= "Get a reference to the value of field `working_dir` after provisioning.\nWorking directory in which to run command; defaults to current directory"]
    pub fn working_dir(&self) -> PrimExpr<String> {
        PrimExpr::new(self.shared().clone(), format!("{}.working_dir", self.extract_ref()))
    }
}
